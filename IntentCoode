import json
import csv
import boto3
import json
import dateutil.parser
import datetime
import time
import os
import math
import random
import logging
import pysnow

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
def close(session_attributes, fulfillment_state, message):
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message    } }
    return response
def createIncident(Category):   
    c = pysnow.Client(instance='dev92382', user='admin', password='xUmqizLTJ1Q6')   
    incident = c.resource(api_path='/table/incident')   
    new_record = {
    'short_description': 'Testing API',
    'description': 'Incident created through API call',
    'category':Category
    }
	
    response = incident.create(payload=new_record)
    for record in response.all():
        output=record['number']
    return 'Incident created with number '+str(output)

def dispatch(intent_request):
    logger.debug('dispatch intentName={}'.format(intent_request['currentIntent']['name'])) 
    intent_name = intent_request['currentIntent']['name']   
    Category=intent_request['currentIntent']['slots']['Category']
    source = intent_request['invocationSource']
    output_session_attributes = intent_request['sessionAttributes'] if intent_request['sessionAttributes'] is not None else {}
    if source == 'DialogCodeHook':
        
        slots = intent_request['currentIntent']['slots']
    if intent_name == 'createIncident':
        return close(
        output_session_attributes,
        'Fulfilled',
        {
            'contentType': 'PlainText',
            'content': format(createIncident(Category)) 
        }
    )
	 raise Exception('Intent with name ' + intent_name + ' not supported')
	
""" --- Main handler --- """
def lambda_handler(event, context):
    os.environ['TZ'] = 'Frankfurt, Germany'
    time.tzset()
    logger.debug('event.bot.name={}'.format(event['bot']['name']))
    return dispatch(event)
